@page "/CambiarPassword"
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager uriHelper

<h3>Cambiar contraseña</h3>
<AuthorizeView>
    <EditForm Context="myContext" Model="@MyChangePass" OnValidSubmit="@UpdatePass">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label>Password actual:</label>
                <InputPassword required class="form-control" @bind-Value="MyChangePass.CurrentPass" />
            </div>

            <div class="form-group mb-3">
                <label>Nuevo Password:</label>
                <InputPassword required class="form-control" @bind-Value="MyChangePass.NewPass" />
            </div>

            <div class="form-group mb-3">
                <label>Confirmación Password:</label>
                <InputPassword required class="form-control" @bind-Value="MyChangePass.ConfirmPass" />
            </div>
        </div>

        <button class="btn btn-primary" type="submit">
            <span class="oi oi-check"></span> Realizar
        </button>
    </EditForm>
    @{MyChangePass.UserName = context.User.Claims.First(c => c.Type == "userNM").Value; }
</AuthorizeView>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    private ChangePassModel MyChangePass { get; set; } = new ChangePassModel();

    private async Task UpdatePass()
    {
        var modal = Modal.Show<ModalWait>("", SharedModalOptions.modalOptionsWait);
        var result = await http.PutAsJsonAsync<ChangePassModel>("api/Account/ChangePassword", MyChangePass);
        switch (result.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                modal.Close();
                Modal.Show<ModalInfo>("Operación Exitosa", SharedModalOptions.SetParameterModalInfo(Utilities.MSGSUCCESS, "alert alert-success"), SharedModalOptions.modalOptionsInfo);
                break;
            case System.Net.HttpStatusCode.Unauthorized:
                uriHelper.NavigateTo("/Logout");
                break;
            default:
                modal.Close();
                Modal.Show<ModalInfo>("Error", SharedModalOptions.SetParameterModalInfo(result.Content.ReadAsStringAsync().Result, "alert alert-danger"), SharedModalOptions.modalOptionsInfo);
                break;
        }
    }

}
